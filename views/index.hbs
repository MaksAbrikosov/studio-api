<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-gtEjrD/SeCtmISkJkNUaaKMoLD0//ElJ19smozuHV6z3Iehds+3Ulb9Bn9Plx0x4" crossorigin="anonymous"></script>
    <script   src="https://code.jquery.com/jquery-3.6.0.js"   integrity="sha256-H+K7U5CnXl1h5ywQfKtSj8PCmoN9aaq30gDh27Xc0jk="   crossorigin="anonymous"></script>

    <script
            src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"
            integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo"
            crossorigin="anonymous"
    ></script>
    <script
            src="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0-alpha1/js/bootstrap.min.js"
            integrity="sha384-oesi62hOLfzrys4LxRF63OJCXdXDipiYWBnvTl9Y9/TRlw5xlKIEHpNyvvDShgf/"
            crossorigin="anonymous"
    ></script>
    <link rel="stylesheet" href="/css/style.css">

    <title>Studio Tool Uploader</title>

</head>
<body>
    <div class="spinner-border text-success" id="spinner" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>

    <div class="container col-8 offset-2 mt-4 mb-4">

        <div class="alert alert-custom alert-dismissible fade show" role="alert" style="display: none">
            <div class="alertMsg"></div>
        </div>
        <form class="needs-validation" novalidate>

            <div class="card border-secondary mb-3 configuration" >
                <div class="card-header">Configuration</div>
                <div class="card-body text-secondary">
                    <p class="card-text">

                        <div class="mb-3">
                            <label for="path" class="form-label">Creative Folder Path</label>
                            <input type="path" class="form-control col-md-8" id="path" placeholder="path">
                        </div>

                        <div class="mb-3">
                            <label for="creativeUrl" class="form-label">Campaign Url</label>
                            <input type="text" class="creativeUrl form-control" id="creativeUrl" name="creativeUrl" required>
                        </div>

                    <div class="d-grid gap-2 mt-3">
                        <button class="btn btn-green checkCampaignIdBtn"  type="button" id="checkCampaignIdBtn" onclick="checkCampaign()" >Check Campaign</button>
                        <button class="btn btn-green loadingCheckCampaign" type="button" disabled style="display: none">
                            <span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true"></span>
                            Loading...
                        </button>
                    </div>
                    </p>
                </div>
            </div>

<!--            <div class="card text-dark bg-light mb-3 formCard" id="testCon">-->
            <div class=" text-dark bg-light mb-3 formCard" id="testCon">


                {{#each creatives}}
                <div class="card text-dark bg-light mb-3 cardIn" >
                    <div class="card-header">
                        <div class="mb-3 mt-2">
                            <label for="" class="form-label">Creative Name</label>
                            <input type="text" class="creativeName form-control"  id="card{{ @index }}" name="creatives" value="{{@key}}" >
                        </div>
                    </div>
                    <div class="card-body">
<!--                        <p>Sizes</p>-->
                        {{#each this}}
                            <div class="form-check checkCard">
                                <input class="form-check-input me-1" name="{{@index}}" type="checkbox" value="{{ this }}"  data-id="el{{@index}}" />
                                <label for="check" class="lab">{{@../key}}_{{ this }}</label>
                            </div>
                        {{/each}}
                    </div>
                </div>
            {{/each}}
            </div>
            <div class="d-grid gap-2 mt-3">
                <button class="btn btn-green submitBtn" id="submit" type="submit">Submit</button>
                <button class="btn btn-green loadingBtn" type="button" disabled style="display: none">
                    <span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true"></span>
                    Loading...
                </button>
            </div>
        </form>
        <div
                class="modal fade"
                id="exampleModal"
                tabindex="-1"
                role="dialog"
                aria-labelledby="exampleModalLabel"
                aria-hidden="true"
        >
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Selected creatives exist in Studio</h5>
                    </div>
                    <div class="modal-body">

                    </div>
                    <div class="modal-footer">
                        <button
                                type="button"
                                class="btn btn-lightGrey cancelButton"
                                data-dismiss="modal"
                        >
                            No
                        </button>
                        <button type="button" class="btn btn-green confirmButton">Yes</button>
                    </div>
                </div>
            </div>

    </div>

    <script src="/js/parseCampaignUrl.js"></script>
    <script src="/js/showAlert.js"></script>
    <script src="/js/checkIfCampaignExist.js"></script>
    <script src="/js/updateCreativeName.js"></script>

    <script>

        <!--let decodedJsonData = decodeURIComponent("{{{encodedJsonData}}}");-->
        <!--let jsonObj = JSON.parse(decodedJsonData);-->


        let decodedJsonPathToFolder = decodeURIComponent("{{{pathToFolder}}}");
        let pathToFolder = JSON.parse(decodedJsonPathToFolder);

        document.getElementById('path').value = pathToFolder

        let cardObj = {}
        // let changedName = false
        let creatives = {}
        let result = {}

        let changedName = {}

        let myModal = new bootstrap.Modal(document.getElementById('exampleModal'))

       // document.querySelectorAll('.cardIn input[type="text"]').forEach(el => {
       //     Object.assign(cardObj, {[el.id] : null })
       //     changed[el.getAttribute('value')] = false
       //  })

        const readDisplayedCreatives = () => {
            document.querySelectorAll('.cardIn input[type="text"]').forEach(el => {
                Object.assign(cardObj, {[el.id] : null })
                changedName[el.getAttribute('value')] = false
            })
        }

        readDisplayedCreatives()

        const template = (nameCreative, index, data) => {
            const card = document.createElement("div")
            card.setAttribute('class', `card text-dark bg-light mb-3 cardIn` )
            card.setAttribute('id', index)

            const cardHeader = document.createElement("div")
            cardHeader.setAttribute('class', 'card-header')

            const headerDiv = document.createElement("div")
            headerDiv.setAttribute('class', 'mb-3 mt-2')

            const inputLabel = document.createElement("label")
            inputLabel.setAttribute('class', 'form-label')
            inputLabel.innerHTML = "Creative Name"


            const cardBody = document.createElement("div")
            cardBody.setAttribute('class', 'card-body')

            // const bodyText = document.createElement("p")
            // bodyText.innerHTML = "Sizes"

            const text = document.createElement("p")
            text.innerHTML = nameCreative


            const input = document.createElement("input")
            input.setAttribute('class', 'creativeName form-control')
            input.setAttribute('name', 'creatives')
            input.setAttribute('type', 'text')
            input.setAttribute('value', nameCreative)
            input.setAttribute('id', `card${index}`)

            card.appendChild(cardHeader)
            cardHeader.appendChild(headerDiv)
            headerDiv.appendChild(input)

            card.appendChild(cardBody)
            // cardBody.appendChild(bodyText)

            data[nameCreative].forEach((name, index) => {

                const formCheckClass = document.createElement("div")
                formCheckClass.setAttribute('class', 'form-check checkCard')

                const checkBox = document.createElement("input")
                checkBox.setAttribute('class', 'form-check-input me-1')
                checkBox.setAttribute('name', index)
                checkBox.setAttribute('type', 'checkbox')
                checkBox.setAttribute('value', name)
                checkBox.setAttribute('data-id', `el${index}`)
                checkBox.setAttribute('id', index)

                const checkBoxLabel = document.createElement("label")
                checkBoxLabel.setAttribute('for', index)
                checkBoxLabel.setAttribute('class', 'lab')
                checkBoxLabel.innerHTML = `${nameCreative}_${name}`

                cardBody.appendChild(formCheckClass)
                formCheckClass.appendChild(checkBox)
                formCheckClass.appendChild(checkBoxLabel)
            })

            return card
        }

        const display = (data) => {
            Object.keys(data).forEach((name, index) => {
                const newTemp = template(name, index, data)
                document.getElementsByClassName('formCard')[0].appendChild(newTemp)
                updateCreativeName()
            })
        }

        const creativePath = document.getElementById('path').addEventListener('input', (e) => {
            creatives = {}
            cardObj = {}

            const localPath = e.target.value
            fetch("/chooseDir", {
                method: "POST",
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({localPath})
            })
            .then(response => response.json())
            .then(data => {
                let container = document.getElementById('testCon')
                while (container.firstChild) {
                    container.removeChild(container.firstChild);
                }
                display(data)
                changedName = {}
                readDisplayedCreatives()
            })
        })

    ////////////////////////////////////////////////////////////////////////////
        // SUBMIT

        function confirmUpload(){
            myModal.hide()
            submitAssets(result)
        }

        function cancelUpload(){
            myModal.hide()
            document.getElementsByClassName("submitBtn")[0].style.display = "block";
            document.getElementsByClassName("loadingBtn")[0].style.display = "none";
            document.getElementById("spinner").style.display = "none";
        }

        // document.getElementById('submit').onclick = function(e) {
        document.getElementById('submit').onclick = function(e) {
            e.preventDefault();

            const { campaignId, advertiserId, ownerId} = parseCampaignUrl()

            if(!campaignId && !advertiserId && !ownerId){
                showAlert(' <strong>Error! Please check campaign URL</strong> ')
                return;
            }

            let newName;
            document.querySelectorAll('.cardIn').forEach(node=> {

                const originName = node.querySelector('input[type=text]').getAttribute('value')
                if(changedName[originName]){
                    newName = node.querySelector('input[type=text]').value
                } else {
                    newName = node.querySelector('input[type=text]').value+"_"
                }

                const checked = [...node.querySelectorAll('input[type=checkbox]:checked')].map(e=> e.value)

                creatives[originName] = {
                    newName,
                    data:checked
                }
            })

            // check creative folder path
            const creativePath = document.getElementById('path').value
            if(!creativePath.length){
                showAlert('<strong>Creative folder path is empty!</strong> Please enter URL')
                return;
            }

            // console.log('creatives', creatives)
            // console.log('result', result)
            //
            // Object.keys(creatives).map(oldName => {
            //     Object.values(creatives).map(creative => {
            //         if( `${oldName}_` === creative.newName){
            //             console.log(oldName, creative.newName)
            //         } else {
            //             console.log(oldName, creative.newName)
            //         }
            //     })
            // })

             result = {
                campaignId,
                advertiserId,
                ownerId,
                creativePath,
                creatives: {...creatives}
            }

            document.getElementsByClassName("confirmButton")[0].addEventListener('click', confirmUpload)
            document.getElementsByClassName("cancelButton")[0].addEventListener('click', cancelUpload)

            // let checkboxes = document.querySelectorAll('input[type="checkbox"]');
            // let checkedOne = Array.prototype.slice.call(checkboxes).some(x => x.checked);
            let countCheckedCheckboxes = document.querySelectorAll('input[type="checkbox"]:checked').length

            if(countCheckedCheckboxes !== 0){

                document.getElementsByClassName("alert")[0].style.display = "none";
                document.getElementsByClassName("submitBtn")[0].style.display = "none";
                document.getElementsByClassName("loadingBtn")[0].style.display = "block";
                document.getElementById("spinner").style.display = "block";


                fetch("/check-assets", {
                    method: "POST",
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(result)
                })
                .then(response => response.json())
                .then(data => {
                    if(data.message.length > 0){
                        const modalBody = document.getElementsByClassName("modal-body")[0]
                        showAlert(data.message, modalBody)

                        let tagP = document.createElement("p");
                        let text = document.createTextNode("Would you like to update the assets of the selected creatives?");
                        tagP.appendChild(text);
                        modalBody.appendChild(tagP);
                        myModal.show()
                    } else {
                        submitAssets(result)
                    }
                })
                .catch(err => {
                    console.log(err)
                })
            } else {
                showAlert(`Please select creatives to upload`)
            }
        }

        function submitAssets(result){
            // check progress status
            const interval = setInterval(() => {

                fetch("/progress", {
                    method: "GET",
                    headers: {
                        'Content-Type': 'application/json'
                    },
                })
                .then(response => response.json())
                .then(data => {
                    if(data.message.length > 0){
                        // showAlert(data.message)
                        let alertContainer = document.getElementsByClassName('alertMsg')[0]
                        showAlert(data.message,  alertContainer)
                        document.getElementsByClassName("alert")[0].style.display = "block";
                    }
                })
                .catch(err => {
                    console.log(err)
                })
                .finally(() => {
                    // scroll bottom alert progress
                    let divEl = document.getElementsByClassName("alert-custom")[0];
                    divEl.scrollTop = divEl.scrollHeight + 20;
                })
            }, 3000)


            fetch("/complete", {
                method: "POST",
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(result)
            })
            .then(response => response.json())
            .then(data => {
                let alertContainer = document.getElementsByClassName('alertMsg')[0]
                showAlert(data.message,  alertContainer)
                document.getElementsByClassName("submitBtn")[0].style.display = "block";
                document.getElementsByClassName("loadingBtn")[0].style.display = "none";
                clearInterval(interval);
                document.getElementById("spinner").style.display = "none";
            })
            .catch(err => {
                console.log(err)
            })
            .finally(() => {
                // TODO Check remove
                document.getElementsByClassName("confirmButton")[0].removeEventListener('click', confirmUpload)
                document.getElementsByClassName("cancelButton")[0].removeEventListener('click', cancelUpload)
            })
        }

    </script>
</body>
</html>